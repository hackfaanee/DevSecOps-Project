name: DevSecOps Full Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  # ---- SonarQube (SAST) ----
  sonar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2.0.2
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=DevSecOps-Project
            -Dsonar.projectName=DevSecOps-Project
            -Dsonar.sources=.

  # ---- Secrets Scan ----
  secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run GitLeaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source=. --verbose --redact

  # ---- Trivy Scan ----
  trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/trivy

      - name: Trivy Filesystem Scan
        run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .

      # Uncomment if you add a Dockerfile
      # - name: Build Docker image
      #   run: docker build -t php-app:latest .
      #
      # - name: Trivy Docker Image Scan
      #   run: trivy image --exit-code 1 --severity HIGH,CRITICAL php-app:latest

  # ---- Deploy to Linode (Production) ----
  deploy:
    runs-on: ubuntu-latest
    needs: [sonar, secrets, trivy]
    steps:
      - name: Deploy to Linode
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LINODE_HOST }}
          username: ${{ secrets.LINODE_USER }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          script: |
            git config --global --add safe.directory /var/www/html
            cd /var/www/html
            git pull origin main
            sudo systemctl restart apache2

  # ---- OWASP ZAP (DAST) ----
  dast:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4

      - name: Pull OWASP ZAP Docker Image
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: Run OWASP ZAP
        run: |
          docker run --rm --user root -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "http://${{ secrets.LINODE_HOST }}/index.php" \
            -r zap-report.html -J zap-report.json

      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-report.html
            zap-report.json
